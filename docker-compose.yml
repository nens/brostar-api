services:

  db:
    image: postgis/postgis:14-3.5
    environment:
      POSTGRES_USER: 'brostar'
      POSTGRES_PASSWORD: 'brostar'
      POSTGRES_DB: 'brostar'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brostar"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:latest
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    expose:
      - 6379
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery_default:
    environment:
      # # Can be set in .env, we'll pass them on. settings.py has some defaults.
      - FIELD_ENCRYPTION_KEY
      - SECRET_KEY
      - NENS_AUTH_ISSUER
      - NENS_AUTH_CLIENT_ID
      - NENS_AUTH_CLIENT_SECRET
    build: .
    volumes:
      - .:/code
      - ./media:/media  # <- this is crucial
    command: >
      uv run celery -A brostar_api worker
      -Q default
      --concurrency=2
      --max-memory-per-child=100000
      --loglevel=INFO
      --hostname=default@%h
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  celery_upload:
    environment:
      # # Can be set in .env, we'll pass them on. settings.py has some defaults.
      - FIELD_ENCRYPTION_KEY
      - SECRET_KEY
      - NENS_AUTH_ISSUER
      - NENS_AUTH_CLIENT_ID
      - NENS_AUTH_CLIENT_SECRET
    build: .
    volumes:
      - .:/code
      - ./media:/media  # <- this is crucial
    command: >
      uv run celery -A brostar_api worker
      -Q upload
      --concurrency=1
      --max-memory-per-child=200000
      --loglevel=INFO
      --hostname=upload@%h
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  web:
    environment:
      # # Can be set in .env, we'll pass them on. settings.py has some defaults.
      - FIELD_ENCRYPTION_KEY
      - SECRET_KEY
      - NENS_AUTH_ISSUER
      - NENS_AUTH_CLIENT_ID
      - NENS_AUTH_CLIENT_SECRET
    build: .
    command: uv run python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - .:/code
      - ./media:/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      celery_default:
        condition: service_started
      celery_upload:
        condition: service_started


volumes:
  pgdata:
  redis-data:
